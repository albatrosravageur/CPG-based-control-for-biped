<?xml version="1.0" encoding="UTF-8"?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="title"/><w:jc w:val="left"/></w:pPr><w:r><w:rPr><w:b/></w:rPr><w:t>Deriving Equations of Motion of Double Pendulum </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="center"/></w:pPr><w:customXml w:element="image"><w:customXmlPr><w:attr w:name="height" w:val="307"/><w:attr w:name="width" w:val="306"/><w:attr w:name="relationshipId" w:val="rId1"/></w:customXmlPr></w:customXml></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Derive the equations of motion of this system which is in the form of:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="true"/></w:customXmlPr><w:r><w:t>M(q) \ddot q + C(q, \dot q) \dot q + G(q) = 0</w:t></w:r></w:customXml><w:r><w:t> </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>What are the formulas for matrices </w:t></w:r><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>M(q), C(q, \dot q)</w:t></w:r></w:customXml><w:r><w:t> and </w:t></w:r><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>G(q)</w:t></w:r></w:customXml><w:r><w:t>? </w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[syms m1 m2 l1 l2 g 
syms q1 q2 dq1 dq2 ddq1 ddq2]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="title"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Kinematics</w:t></w:r><w:r><w:rPr><w:b/></w:rPr><w:t>: </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:rPr><w:b/></w:rPr><w:t>Position and velocity of m1:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[disp('-------------------------')
disp('Position and velocity of m1:')
x1 = l1 * sin(q1)
% y1 = 
dx1 = diff(x1, q1) * dq1
% dy1 =  ]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:rPr><w:b/></w:rPr><w:t>Position and velocity of m2:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[disp('-------------------------')
disp('Position and velocity of m2:')
x2 = l1 * sin(q1) + l2 * sin(q2)
% y2 =  
% dx2 = % Note: x2 is function of both q1 and q2
% dy2 = % Note: y2 is function of both q1 and q2]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="title"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Dynamics:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:rPr><w:b/></w:rPr><w:t>Kinetic and potential energies of m1:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[disp('-------------------------')
disp('Kinetic and potential energies of m1:')
% T1 =  
% V1 =  
% T1 = simplify(T1) % To simplify the symbolic equations
% V1 = simplify(V1)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:rPr><w:b/></w:rPr><w:t>Kinetic and potential energies of m2:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[disp('-------------------------')
disp('Kinetic and potential energies of m2:')
% T2 =  
% V2 =  
% T2 = simplify(T2, 'Steps', 50) % sometimes you need to 'increase' the simplification level
% V2 = simplify(V2)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Recall Lagrangian:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="center"/></w:pPr><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="true"/></w:customXmlPr><w:r><w:t>L(q, \dot q) = T(q, \dot q) - V(q)</w:t></w:r></w:customXml></w:p><w:p><w:pPr><w:pStyle w:val="heading"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Lagrange equations of motion:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="center"/></w:pPr><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>\frac{d}{dt}(\frac{\partial L}{\partial \dot q_i }) - \frac{\partial L}{\partial q_i} = 0</w:t></w:r></w:customXml><w:r><w:t>           for i = 1, 2</w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[disp('-------------------------')
disp('Cacluate the Lagrangian of the system: ')
% T =  % this is the total kinetic energy of the system 
% T = simplify(T, 'Steps',50)
% V = % this is the total kinetic energy of the system
% V = simplify(V, 'Steps',50)
% L = % this is the lagrangian of the system ]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>We use </w:t></w:r><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>dLddq</w:t></w:r></w:customXml><w:r><w:t> as short for </w:t></w:r><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>\frac{\partial L}{\partial \dot q}</w:t></w:r></w:customXml><w:r><w:t> and </w:t></w:r><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>dLdq</w:t></w:r></w:customXml><w:r><w:t> for </w:t></w:r><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>\frac{\partial L}{\partial q}</w:t></w:r></w:customXml><w:r><w:t>.     </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[disp('-------------------------')
disp('Calculate the partial derivatives of Lagrangian:')
% dLddq1 = diff(L, dq1);
% dLddq2 = % partial derivative of L wrt dq2
% dLdq1 = % partial derivative of L wrt q1
% dLdq2 = % partial derivative of L wrt q2
% dLddq1 = simplify(dLddq1)
% dLddq2 = % simplify
% dLdq1 = % simplify
% dLdq2 = % simplify]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>We use dLddq_dt for </w:t></w:r><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>\frac{d}{dt}(\frac{\partial L}{\partial \dot q})</w:t></w:r></w:customXml></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>This is to calculate the formula for </w:t></w:r><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>\frac{d}{dt}(\frac{\partial L}{\partial \dot q_1})</w:t></w:r></w:customXml><w:r><w:t>:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[
disp('-------------------------')
% dLddq1_dt = diff(dLddq1, q1) * dq1 + ? %continue: note that dLddq1 is a function of q1, q2, dq1, dq2]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>This is to calculate the formula for </w:t></w:r><w:customXml w:element="equation"><w:customXmlPr><w:attr w:name="displayStyle" w:val="false"/></w:customXmlPr><w:r><w:t>\frac{d}{dt}(\frac{\partial L}{\partial \dot q_2})</w:t></w:r></w:customXml><w:r><w:t>:</w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[% dLddq2_dt =]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[disp('-------------------------')
disp('Calculate equations of motion: ')
% Eq1 = % recall Lagrange equations
% Eq2 = % recall Lagrange equations
% Eq1 = % simplify Eq1 in 50 steps
% Eq2 = % simplify Eq2 in 50 steps]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[disp('-------------------------')
disp('Calculate Mass matrix (M), Corriolis and gravity terms (C and  G):')
% Eq = simplify(collect([Eq1; Eq2], [ddq1, ddq2, dq1, dq2])) 
% 
% G(1, 1) = % hint: you can use subs function 
% G(2, 1) = 
% 
% M(1, 1) = % hint: you can use subs function; don't forget to subtract the G term
% M(1, 2) = 
% M(2, 1) = 
% M(2, 2) = 
% 
% C(1, 1) = 
% C(1, 2) = 
% C(2, 1) = 
% C(2, 2) = 
% M = % simplify M
% C = % simplify C
% G = % simplify G]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Test that your calculation of M, C, and G is correct. Note that getting zero for error only means that your extraction of the Matrices M, C, G matches the equation Eq; it does not mean that all your calculations are correct. </w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[% dq = [dq1; dq2];
% ddq = [ddq1; ddq2];
% Eq_new = M * ddq + C * dq + G;
% error = simplify(Eq_new - Eq)]]></w:t></w:r></w:p><w:p><w:pPr><w:sectPr/></w:pPr></w:p><w:p><w:pPr><w:pStyle w:val="text"/><w:jc w:val="left"/></w:pPr><w:r><w:t>Calcualte the matrix D as follows. Compare the result with the Mass matrix above. What do you conclude? </w:t></w:r></w:p><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[% D0 = jacobian(T, dq).';
% D = jacobian(D0, dq)]]></w:t></w:r></w:p></w:body></w:document>